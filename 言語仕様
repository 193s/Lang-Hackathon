# example:
class Test [
	main :
		int a = 2			# 文末のセミコロンは省略可
		long c = a ** 60
		a = 0
		string str = "test"

		Console.println(str + a)
		Console.print(c)

		bool b = true
		puts(b.toStr())
	;
	
	func puts(String str) :				# Method
		Console.println(" ( ${str} ) ")
	;
	
	func add(int a, b) -> int :
		return a + b
	;
]





#--

メインメソッド:	main []
				引数なし, 静的
				アクセス修飾子はデフォルトでpublicに
				

コメント:			#一行コメント

				#--
				複数行コメント
				aaaa
				--#

ブロック:			{}ではなく[]にしたい

制御文:			条件分岐 [if, else]
				
				繰り返し [for, while -- break, continue]

				ラベルとかgotoは無しで	

例外処理:			try-catch節
				try {
				 ~
				}
				catch (Exception e) {
					e.printStackTrace ()
				}

演算子:			既存の言語とほぼ同じ + 冪乗演算子**とか
				演算子のオーバーロードをサポートしたい
				演算子を新たに定義出来るようにしてみたい

関数:			func 関数名(型 引数名,...) -> 戻り値 [
					~
				]


組み込み型:		int, long, float, double, decimal, bool, char, stringなど
				unsigned修飾子がほしい
				型推論も欲しいかも

クラス:			多重継承はサポートしない
				インターフェースの多重実装はサポート
				演算子のオーバーロードもできるようにしたい

				とりあえず構造体とかインターフェースとか抽象クラスは保留で

配列:			とりあえず保留
				ジャグ配列でない真の多重配列をサポートしたい	


アクセス修飾子:	public, protected, private

ジェネリクス:		保留		

package:	/--	system - lang - ...
			|		   |- Console
			|		   |_ ...
			|	
			|--	(default-package) _ ...
			|
			|
			|__ ...


				import宣言でpackageをインポート　(import system.Console)
				system.lang内は明示的なimportなしで使用可能(java.langみたいな)



--#